@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Utilities
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
             <tr class="row">
                <th class ="col-5">Album title</th>
                <th class ="col-5">Track name</th>
                <th class="col-2"></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr class ="row">
                    <td class="col-5">@track.AlbumTitle</td>
                    <td class="col-5">@track.TrackName</td>
                    <td class="col-2">
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist?.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select id="ExistingPlaylist" class="form-control" @bind="SelectedPlaylistId">
                @foreach (var playlist in UserPlaylists)
                {
                    <option value="@playlist.PlaylistId">@playlist.Name</option>
                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="NewPlaylistName">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }
    private Modal PlaylistDialog { get; set; } = null!;
    private ArtistDTO? Artist;
    private IEnumerable<PlaylistTrackDTO>? Tracks;
    private PlaylistTrackDTO? SelectedTrack;
    private PlaylistDTO? Playlist;
    private string? InfoMessage;
    private string? CurrentUserId;
    private IEnumerable<PlaylistDTO> UserPlaylists = Enumerable.Empty<PlaylistDTO>();
    private long SelectedPlaylistId { get; set; }
    private string? NewPlaylistName { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();
        await LoadArtist();
        await LoadPlaylistTracks();
    }


    private async Task<string?> GetUserId()
    {
        var user = (await AuthenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }


    private async Task FavoriteTrack(long trackId)
    {
        var selectedTrack = Tracks?.FirstOrDefault(t => t.TrackId == trackId);
        var response = await Http.PostAsync($"{new Uri(NavigationManager.BaseUri)}api/playlist/favorite/{trackId}?userId={CurrentUserId}", null);
        if (response.IsSuccessStatusCode)
        {
            InfoMessage = $"Track {selectedTrack?.ArtistName} - {selectedTrack?.AlbumTitle} - {selectedTrack?.TrackName} added to playlist  {SD.AutomaticPlaylist}.";
            await LoadPlaylistTracks();
        }
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        var selectedTrack = Tracks?.FirstOrDefault(t => t.TrackId == trackId);
        var response = await Http.PostAsync($"{new Uri(NavigationManager.BaseUri)}api/playlist/unfavorite/{trackId}?userId={CurrentUserId}", null);
        if (response.IsSuccessStatusCode)
        {
            var track = Playlist?.Tracks.FirstOrDefault(t => t.TrackId == trackId);
            InfoMessage = $"Track {selectedTrack?.ArtistName} - {selectedTrack?.AlbumTitle} - {selectedTrack?.TrackName} removed from playlist  {SD.AutomaticPlaylist}.";
            await LoadPlaylistTracks();
        }
    }

    public async Task LoadArtist()
    {
        var response = await Http.GetAsync($"{new Uri(NavigationManager.BaseUri)}api/artist/{ArtistId}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            Artist = JsonSerializer.Deserialize<ArtistDTO>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
        }
        else
        {
            Artist = new ArtistDTO();
        }
    }

    public async Task LoadPlaylistTracks()
    {
        var response = await Http.GetAsync($"{new Uri(NavigationManager.BaseUri)}api/track/{ArtistId}?userId={CurrentUserId}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            Tracks = JsonSerializer.Deserialize<IEnumerable<PlaylistTrackDTO>>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
        }
        else
        {
            Tracks = Enumerable.Empty<PlaylistTrackDTO>();
        }
    }


    public async Task LoadUserPlaylists()
    {
        var response = await Http.GetAsync($"{new Uri(NavigationManager.BaseUri)}api/playlist/playlists?userId={CurrentUserId}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            UserPlaylists = JsonSerializer.Deserialize<IEnumerable<PlaylistDTO>>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                }) ?? Enumerable.Empty<PlaylistDTO>();
        }
        else
        {
            UserPlaylists = Enumerable.Empty<PlaylistDTO>();
        }
    }

    private async Task OpenPlaylistDialog(long trackId)
    {
        await LoadUserPlaylists();
        CloseInfoMessage();
        SelectedTrack = Tracks?.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        // TODO
        if (string.IsNullOrWhiteSpace(NewPlaylistName))
        {
        }
        else
        {
            var IsNameAvailable = !UserPlaylists.Any(t => t.Name.Contains(NewPlaylistName.Trim()));
            if (IsNameAvailable)
            {
                await AddPlaylist();
            }
            else
            {
                CloseInfoMessage();
                InfoMessage = "Name not Available - Failed to create new playlist.";
            }
        }

        PlaylistDialog.Close();
    }

    private async Task AddPlaylist()
    {
        var response = await Http.PostAsync($"{new Uri(NavigationManager.BaseUri)}api/playlist?playlistName={NewPlaylistName}&userId={CurrentUserId}&trackId={SelectedTrack?.TrackId}", null);
        if (response.IsSuccessStatusCode)
        {
            CloseInfoMessage();
            await LoadPlaylistTracks();
            InfoMessage = $"Track {Artist?.Name} - {SelectedTrack?.AlbumTitle} - {SelectedTrack?.TrackName} added to playlist {{playlist name}}.";

        }

        CloseInfoMessage();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = string.Empty;
    }
}
