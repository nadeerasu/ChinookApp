@page "/"
@attribute [Authorize]

@using Chinook.ClientModels;
@using System.Text.Json;
@inject HttpClient Http;
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{    <div class="container">
        <div class="form-group">
            <input class="form-control" type="text" placeholder="Search Artists..." @bind="SearchText" @bind:event="oninput" />
        </div>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
                @foreach (var artist in FilteredArtists)
                {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.AlbumCount</td>
                </tr>
            }
        </tbody>
    </table>
    </div>
}

@code {
    private IEnumerable<ArtistDTO>? Artists;
    private string? SearchText;

    private IEnumerable<ArtistDTO> FilteredArtists => string.IsNullOrEmpty(SearchText)
        ? Artists ?? Enumerable.Empty<ArtistDTO>()
        : Artists?.Where(a => a.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)) ?? Enumerable.Empty<ArtistDTO>();

    protected override async Task OnInitializedAsync()
    {
        await LoadArtists();
    }

    public async Task LoadArtists()
    {
        var response = await Http.GetAsync($"{new Uri(NavigationManager.BaseUri)}api/artist/artists");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            Artists = JsonSerializer.Deserialize<IEnumerable<ArtistDTO>>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
        }
        else
        {
            Artists = Enumerable.Empty<ArtistDTO>();
        }
    }
}
